class Thunk {                                                                                                                                                                                                            
    constructor(expr) { this.expr = expr; }                                                                                                                                                                              
    value() { return (this.expr = (x => () => x)(this.expr()))(); }                                                                                                                                                      
}                                                                                                                                                                                                                        
                                                                                                                                                                                                                         
class Variant {                                                                                                                                                                                                          
    constructor(constructors) {                                                                                                                                                                                          
        this.prototype = {};                                                                                                                                                                                             
        for(let cons in constructors) this[cons] = function() {                                                                                                                                                          
            return Object.assign(                                                                                                                                                                                        
                Object.create(Object.assign({match: (cases) => (cons in cases) ? cases[cons].apply(null, arguments) : cases._()},                                                                                        
                                            this.prototype)),                                                                                                                                                            
                constructors[cons].apply(null, arguments));                                                                                                                                                              
        };                                                                                                                                                                                                               
    }                                                                                                                                                                                                                    
}                                                                                                                                                                                                                        
                                                                                                                                                                                                                         
class TailRecursive {                                                                                                                                                                                                    
    constructor(f) { this.f = f; }                                                                                                                                                                                       
    tailcall() { return Object.assign(this, {args: arguments}); }                                                                                                                                                        
    run() {                                                                                                                                                                                                              
        for(this.args = arguments, this.res = this; this.res == this; this.res = this.f.apply(this, this.args));                                                                                                         
        return this.res;                                                                                                                                                                                                 
    }                                                                                                                                                                                                                    
}                                                                                                                                                                                                                        
                                                                                                                                                                                                                         
class Tuple {                                                                                                                                                                                                            
    constructor() { for(var i = 0; i < (this.length = arguments.length); i++) this[i] = arguments[i]; }                                                                                                                  
    unpack(f) { return f.apply(null, this); }                                                                                                                                                                            
}                                                                                                                                                                                                                        
                                                                                                                                                                                                                         
class IO {                                                                                                                                                                                                               
    constructor(execute) { this.execute = execute; }                                                                                                                                                                     
    static pure(value) { return new IO(() => value); }                                                                                                                                                                   
    bind(f) { return new IO(() => f(this.execute()).execute()); }                                                                                                                                                        
    map(f) { return this.bind(x => IO.pure(f(x))); }                                                                                                                                                                     
}
